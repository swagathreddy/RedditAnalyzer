import React, { useState } from 'react';
import { RedditUser } from './types';
import { Header } from './components/Header';
import { ProfileInput } from './components/ProfileInput';
import { RedditProfileCard } from './components/RedditProfileCard';
import { LoadingSpinner } from './components/LoadingSpinner';
import { apiService } from './services/api';

function App() {
  const [user, setUser] = useState<RedditUser | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [isGeneratingSummary, setIsGeneratingSummary] = useState(false);

  const handleProfileSubmit = async (profileUrl: string) => {
    setLoading(true);
    setError('');
    setUser(null);

    try {
      // Call Django backend to scrape Reddit profile
      const result = await apiService.scrapeRedditProfile(profileUrl);
      
      if (result.success && result.data) {
        setUser(result.data);
      } else {
        throw new Error(result.error || 'Failed to scrape profile');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to analyze profile');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateSummary = async () => {
    // AI summary is already generated by the backend
    // This function is not needed anymore since summary comes with the scraped data
    return;
  };

  const extractUsernameFromUrl = (url: string): string | null => {
    const patterns = [
      /reddit\.com\/user\/([^\/\?]+)/,
      /reddit\.com\/u\/([^\/\?]+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        return match[1];
      }
    }

    return null;
  };

  const handleReset = () => {
    setUser(null);
    setError('');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
        <Header />
        <div className="flex items-center justify-center min-h-[calc(100vh-4rem)]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
            <p className="text-gray-600 text-lg">Scraping Reddit profile...</p>
            <p className="text-gray-500 text-sm mt-2">This may take a few moments</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
      <Header />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!user ? (
          <div className="min-h-[calc(100vh-8rem)] flex items-center justify-center">
            <ProfileInput
              onSubmit={handleProfileSubmit}
              isLoading={loading}
              error={error}
            />
          </div>
        ) : (
          <div>
            <div className="mb-6 text-center">
              <button
                onClick={handleReset}
                className="bg-white hover:bg-gray-50 text-gray-700 px-4 py-2 rounded-lg border border-gray-300 transition-colors duration-200"
              >
                Analyze Another Profile
              </button>
            </div>
            
            <RedditProfileCard
              user={user}
              onGenerateSummary={handleGenerateSummary}
              isGeneratingSummary={isGeneratingSummary}
            />
          </div>
        )}

       
      </main>
    </div>
  );
}

export default App;